{"ast":null,"code":"var _jsxFileName = \"/home/neosoft/Desktop/Adara-translate/frontend/adara-translate-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { AudioRecorder, useAudioRecorder } from \"react-audio-voice-recorder\"; // Import AudioRecorder\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [hasTranscribed, setHasTranscribed] = useState(false); // Flag to track if transcription is done\n\n  const recorderControls = useAudioRecorder();\n\n  // Handle when recording is complete\n  const handleRecordingComplete = audioBlob => {\n    // Check if transcription has already been completed to avoid duplicate calls\n    if (hasTranscribed) return;\n    setAudioBlob(audioBlob);\n    setHasTranscribed(true); // Set the flag to avoid further transcription requests\n    sendAudioToAPI(audioBlob);\n  };\n\n  // Send audio to backend for transcription\n  const sendAudioToAPI = audioBlob => {\n    const formData = new FormData();\n    formData.append(\"audio\", audioBlob, \"audio.wav\");\n    setIsProcessing(true);\n    axios.post(\"http://127.0.0.1:8000/api/v1/speech/process/\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(response => {\n      setIsProcessing(false);\n      setTranscription(response.data.transcription);\n    }).catch(error => {\n      console.error(\"Error uploading audio:\", error);\n      setIsProcessing(false);\n    });\n  };\n\n  // Get truncated version of transcription\n  const getTruncatedTranscription = (text, wordLimit) => {\n    const words = text.split(\" \");\n    return words.length > wordLimit ? words.slice(0, wordLimit).join(\" \") + \"...\" : text;\n  };\n\n  // Open/close modal\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"S\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recorder-container\",\n      children: /*#__PURE__*/_jsxDEV(AudioRecorder, {\n        recorderControls: recorderControls,\n        onRecordingComplete: handleRecordingComplete,\n        showVisualizer: true,\n        downloadOnSavePress: false,\n        downloadFileExtension: \"mp3\",\n        strokeColor: \"#000000\",\n        backgroundColor: \"#FF5733\",\n        style: {\n          display: \"none\"\n        } // Hide the default UI\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn start\",\n        onClick: () => {\n          recorderControls.startRecording();\n          setRecording(true);\n          setHasTranscribed(false); // Reset transcription flag when starting new recording\n        },\n        disabled: recording || isProcessing // Disable if recording or processing\n        ,\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn stop\",\n        onClick: () => {\n          recorderControls.stopRecording();\n          setRecording(false);\n        },\n        disabled: !recording || isProcessing // Disable if not recording or processing\n        ,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcription-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"20px\"\n        },\n        children: isProcessing ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Audio is processing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this) // Display when audio is being processed\n        : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"transcription\",\n            children: getTruncatedTranscription(transcription, 100)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), transcription.split(\" \").length > 100 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn toggle\",\n            onClick: openModal,\n            children: \"Show More\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: closeModal,\n          children: \"\\u2716\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Full Transcription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"rY9j6G5iIhDGrAD3R1jz6HqnGgs=\", false, function () {\n  return [useAudioRecorder];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","AudioRecorder","useAudioRecorder","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","recording","setRecording","audioBlob","setAudioBlob","transcription","setTranscription","isModalOpen","setIsModalOpen","isProcessing","setIsProcessing","hasTranscribed","setHasTranscribed","recorderControls","handleRecordingComplete","sendAudioToAPI","formData","FormData","append","post","headers","then","response","data","catch","error","console","getTruncatedTranscription","text","wordLimit","words","split","length","slice","join","openModal","closeModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onRecordingComplete","showVisualizer","downloadOnSavePress","downloadFileExtension","strokeColor","backgroundColor","style","display","onClick","startRecording","disabled","stopRecording","marginTop","_c","$RefreshReg$"],"sources":["/home/neosoft/Desktop/Adara-translate/frontend/adara-translate-frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { AudioRecorder, useAudioRecorder } from \"react-audio-voice-recorder\"; // Import AudioRecorder\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [recording, setRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [hasTranscribed, setHasTranscribed] = useState(false); // Flag to track if transcription is done\n\n  const recorderControls = useAudioRecorder();\n\n  // Handle when recording is complete\n  const handleRecordingComplete = (audioBlob) => {\n    // Check if transcription has already been completed to avoid duplicate calls\n    if (hasTranscribed) return;\n\n    setAudioBlob(audioBlob);\n    setHasTranscribed(true); // Set the flag to avoid further transcription requests\n    sendAudioToAPI(audioBlob);\n  };\n\n  // Send audio to backend for transcription\n  const sendAudioToAPI = (audioBlob) => {\n    const formData = new FormData();\n    formData.append(\"audio\", audioBlob, \"audio.wav\");\n    setIsProcessing(true);\n\n    axios\n      .post(\"http://127.0.0.1:8000/api/v1/speech/process/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      })\n      .then((response) => {\n        setIsProcessing(false);\n        setTranscription(response.data.transcription);\n      })\n      .catch((error) => {\n        console.error(\"Error uploading audio:\", error);\n        setIsProcessing(false);\n      });\n  };\n\n  // Get truncated version of transcription\n  const getTruncatedTranscription = (text, wordLimit) => {\n    const words = text.split(\" \");\n    return words.length > wordLimit\n      ? words.slice(0, wordLimit).join(\" \") + \"...\"\n      : text;\n  };\n\n  // Open/close modal\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <h1>S</h1>\n      </div>\n\n      {/* Audio Recorder UI */}\n      <div className=\"recorder-container\">\n        <AudioRecorder\n          recorderControls={recorderControls}\n          onRecordingComplete={handleRecordingComplete}\n          showVisualizer={true}\n          downloadOnSavePress={false}\n          downloadFileExtension=\"mp3\"\n          strokeColor=\"#000000\"\n          backgroundColor=\"#FF5733\"\n          style={{ display: \"none\" }} // Hide the default UI\n        />\n      </div>\n\n      {/* Recording Control Buttons */}\n      <div className=\"buttons\">\n        <button\n          className=\"btn start\"\n          onClick={() => {\n            recorderControls.startRecording();\n            setRecording(true);\n            setHasTranscribed(false); // Reset transcription flag when starting new recording\n          }}\n          disabled={recording || isProcessing} // Disable if recording or processing\n        >\n          Start Recording\n        </button>\n        <button\n          className=\"btn stop\"\n          onClick={() => {\n            recorderControls.stopRecording();\n            setRecording(false);\n          }}\n          disabled={!recording || isProcessing} // Disable if not recording or processing\n        >\n          Stop Recording\n        </button>\n      </div>\n\n      {/* Transcription Display */}\n      <div className=\"transcription-container\">\n        <div style={{ marginTop: \"20px\" }}>\n          {isProcessing ? (\n            <p>Audio is processing...</p> // Display when audio is being processed\n          ) : (\n            <>\n              <p className=\"transcription\">\n                {getTruncatedTranscription(transcription, 100)}\n              </p>\n              {transcription.split(\" \").length > 100 && (\n                <button className=\"btn toggle\" onClick={openModal}>\n                  Show More\n                </button>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Modal for Full Transcription */}\n      {isModalOpen && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal\">\n            <button className=\"close-button\" onClick={closeModal}>\n              ✖\n            </button>\n            <h2>Full Transcription</h2>\n            <p>{transcription}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}